version: '3.3'

services:
  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    # don't use this in docker-compose
    # volumes:
    #   - "./zk-single-kafka-single/zookeeper/data:/zookeeper-3.4.9/data"
    #   - "./zk-single-kafka-single/zookeeper/datalog:/zookeeper-3.4.9/datalog"
    networks:
      - kstack_network
  kafka:
    image: confluentinc/cp-kafka
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - "./zk-single-kafka-single/kafka/data:/var/lib/kafka/data"
    depends_on:
      - zookeeper
    networks:
      - kstack_network
  kafka-connect:
    image: debezium/connect
    hostname: kafka-connect
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: kafka-connect-configs
      OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      STATUS_STORAGE_TOPIC: kafka-connect-statuses
      BOOTSTRAP_SERVERS: kafka:19092
    volumes:
      - "./zk-single-kafka-single/kafka-connect/logs:/kafka/logs"
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka
      - mysql
    networks:
      - kstack_network
  mysql:
    image: mysql
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "mysqlP@ssw0rd"
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - kstack_network
  schema-registry:
    image: confluentinc/cp-schema-registry
    ports:
      - "8081:8081"
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
    restart: on-failure
    networks:
      - kstack_network
  rest-proxy:
    image: confluentinc/cp-kafka-rest
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:19092
      KAFKA_REST_LISTENERS: "http://rest-proxy:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - kstack_network
    restart: on-failure
  kafka-topics-ui:
    image: landoop/kafka-topics-ui
    ports:
      - "8001:8000"
    hostname: kafka-topics-ui
    container_name: kafka-topics-ui
    depends_on:
      - rest-proxy
    networks:
      - kstack_network
    environment:
      KAFKA_REST_PROXY_URL: 'http://rest-proxy:8082'
      PROXY: 'true'
    restart: on-failure
  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    hostname: kafka-connect-ui
    ports:
      - "8002:8000"
    depends_on:
      - kafka-connect
    networks:
      - kstack_network
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    restart: on-failure
networks:
  kstack_network:
    driver: overlay